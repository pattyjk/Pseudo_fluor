axis.text = element_text(size=14), legend.text=element_text(size=14))+
scale_shape_manual(values=c(15,16))
ggplot(inhib_od197, aes(OD600, mean_inhib, color=C_source))+
geom_point()+
geom_smooth(method='lm')+
theme_bw()+
#stat_cor(aes(color=Strain), method = "spearman", cor.coef.name="rho")+
facet_wrap(~Strain)+
xlab("OD 600")+
ylab("Bd inhibition")+
guides(size="none")+
theme(text = element_text(size=14),
axis.text = element_text(size=14), legend.text=element_text(size=14))+
scale_shape_manual(values=c(15,16))
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt")
View(july_ecoplate)
eco_pca<-prcomp(july_ecoplate)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", row.names=1)
eco_pca<-prcomp(july_ecoplate)
plot(eco_pca, display='sites')
eco_pca<-prcomp(july_ecoplate)
biplot(eco_pca, display='sites')
eco_pca<-prcomp(t(july_ecoplate))
warnings()
eco_pca<-prcomp(t(july_ecoplate))
>biplot
?biplot
str(eco_pca)
biplot(eco_pca)
biplot(eco_pca), display='sites', arrow.len = 0)
biplot(eco_pca, display='sites', arrow.len = 0)
plot(eco_pca, display='sites')
plot(eco_pca$x, display='sites')
plot(eco_pca$x, display='sites')
biplot(eco_pca)
warnings()
biplot(eco_pca)
?biplot
?princomp
eco_pca<-princomp(t(july_ecoplate))
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", row.names=1)
eco_pca<-princomp(july_ecoplate)
plot(eco_pca)
biplot(eco_pca)
install.packages("factoextra")
library(factoextra)
fviz_pca_ind(eco_pca,
repel = TRUE)
eco_pca<-princomp(t(july_ecoplate))
fviz_pca_ind(eco_pca,
repel = TRUE)
eco_pca<-princomp(t(july_ecoplate))
july_ecoplate<-t(july_ecoplate)
eco_pca<-princomp(t(july_ecoplate))
eco_pca<-princomp(july_ecoplate)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt")
july_ecoplate<-t(july_ecoplate)
eco_pca<-princomp(july_ecoplate)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", header=T)
july_ecoplate<-t(july_ecoplate)
eco_pca<-princomp(july_ecoplate)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", row.names=1)
july_ecoplate<-t(july_ecoplate)
eco_pca<-princomp(july_ecoplate)
eco_pca<-prcomp(july_ecoplate)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", row.names=1)
july_ecoplate<-t(july_ecoplate)
eco_pca<-prcomp(july_ecoplate)
biplot(eco_pca)
library(factoextra)
fviz_pca_ind(eco_pca,
repel = TRUE)
july_ecoplate <- read.delim("C:/Users/patty/Downloads/july_ecoplate.txt", row.names=1)
july_ecoplate<-t(july_ecoplate)
eco_pca<-prcomp(july_ecoplate)
library(factoextra)
fviz_pca_ind(eco_pca,
repel = TRUE)
install.packages("swirl")
library("swirl")
swirl()
install.packages("rlang")
install.packages("rlang")
library("swirl")
sqirl()
swirl()
RIL_ecoplate <- read.delim("C:/Users/patty/OneDrive/Desktop/RIL_ecoplate.txt", row.names=1)
View(RIL_ecoplate)
RIL_ecoplate<-t(RIL_ecoplate)
ril_pca<-prcomp(RIL_ecoplate)
library(factoextra)
fviz_pca_ind(ril_pca,
repel = TRUE)
plot<-fviz_pca_ind(ril_pca,
repel = TRUE)
str(plot)
RIL_ecoplate <- read.delim("C:/Users/patty/OneDrive/Desktop/RIL_ecoplate.txt", row.names=1)
RIL_ecoplate<-t(RIL_ecoplate)
ril_pca<-prcomp(RIL_ecoplate)
library(factoextra)
fviz_pca_ind(ril_pca,
repel = TRUE)
RIL_ecoplate <- read.delim("C:/Users/patty/OneDrive/Desktop/RIL_ecoplate.txt", row.names=1)
View(RIL_ecoplate)
#transpose data frame
?t
RIL_ecoplate <-t(RIL_ecoplate)
#calculate principle components analysis
?prcomp
prcomp(RIL_ecoplate)
ril_pca<-prcomp(RIL_ecoplate)
str(ril_pca)
ril_pca$x
?fviz_pca_ind
#plot PCA
fviz_pca_ind(ril_pca)
?mapply
ril_awcd<-apply(RIL_ecoplate, margin=2, function(x) (.318-x)/96)
library(reshape2)
fil_m<-melt(RIL_ecoplate)
View(fil_m)
ril_awcd<-apply(RIL_ecoplate, margin=2, function(x) sum((x-0.318)/96))
ril_awcd<-apply(RIL_ecoplate, 2, sum((x-0.318)/96))
ril_awcd<-apply(RIL_ecoplate, 2, function(x) sum((x-0.318)/96))
View(ril_awcd)
ab <- read.delim2("C:/Users/patty/OneDrive/Desktop/ab.txt")
View(ab)
names(ab)
ggplot(ab, aes(as.factor(Pond_No, No_Colonies_Kanamycin)))+
geom_boxplot()+
facet_wrap(~Pond_type)
ggplot(ab, aes(as.factor(Pond_No), No_Colonies_Kanamycin))+
geom_boxplot()+
facet_wrap(~Pond_type)
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Kanamycin)))+
geom_boxplot()+
facet_wrap(~Pond_type)
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Kanamycin)))+
geom_boxplot()+
facet_wrap(~Pond_type, scales = 'free_x')
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Steptomycin)))+
geom_boxplot()+
facet_wrap(~Pond_type, scales = 'free_x')
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Chloramphenicol)))+
geom_boxplot()+
facet_wrap(~Pond_type, scales = 'free_x')
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Sulfamethazine)))+
geom_boxplot()+
facet_wrap(~Pond_type, scales = 'free_x')
ggplot(ab, aes(as.factor(Pond_No), as.numeric(No_Colonies_Trimethopram)))+
geom_boxplot()+
facet_wrap(~Pond_type, scales = 'free_x')
#import dataset
library(readxl)
MRS_M9_antibiotic_data <- read_excel("C:/Users/patty/Downloads/MRS_M9_antibiotic_data.xlsx")
antibiotic_data <- read_excel("C:/Users/patty/Downloads/MRS_M9_antibiotic_data.xlsx")
which(antibiotic_data == "TMTC")
View(antibiotic_data)
str(antibiotic_data)
plot(antibiotic_data$No_Colonies_Chloramphenicol, antibiotic_data$Pond_No)
plot(antibiotic_data$No_Colonies_Chloramphenicol, antibiotic_data$No_Colonies_Sulfamethazine)
#multiply data
antibiotic_data$R2A_CFU_ml<-antibiotic_data$No_colonies_R2A*100
#multiply data
antibiotic_data$R2A_CFU_ml<-as.numeric(antibiotic_data$No_colonies_R2A)*100
antibiotic_data$R2A_CFU_ml<-as.numeric(antibiotic_data$No_colonies_R2A)*100
antibiotic_data$chlor_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Chloramphenicol)*100
antibiotic_data$strep_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Steptomycin)*100
antibiotic_data$kan_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Kanamycin)*100
antibiotic_data$sulf_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Sulfamethazine)*100
antibiotic_data$trime_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Trimethopram)*100
antibiotic_data$R2A_CFU_ml<-as.numeric(antibiotic_data$No_colonies_R2A)*100
antibiotic_data$chlor_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Chloramphenicol)*100
antibiotic_data$strep_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Steptomycin)*100
antibiotic_data$kan_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Kanamycin)*100
antibiotic_data$sulf_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Sulfamethazine)*100
antibiotic_data$trime_CFU_ml<-as.numeric(antibiotic_data$No_Colonies_Trimethopram)*100
#calculate percentage of communites resistant to each antibiotic
antibiotic_data$chlor_resis<-as.numeric((antibiotic_data$chlor_CFU_ml/antibiotic_data$R2A_CFU_ml)*100)
antibiotic_data$strep_resis<-as.numeric((antibiotic_data$strep_CFU_ml/antibiotic_data$R2A_CFU_ml)*100)
antibiotic_data$kan_resis<-as.numeric((antibiotic_data$kan_CFU_ml/antibiotic_data$R2A_CFU_ml)*100)
antibiotic_data$sulf_resis<-as.numeric((antibiotic_data$sulf_CFU_ml/antibiotic_data$R2A_CFU_ml)*100)
antibiotic_data$trime_resis<-as.numeric((antibiotic_data$trime_CFU_ml/antibiotic_data$R2A_CFU_ml)*100)
library(reshape2)
library(ggplot2)
dim(antibiotic_data)
antibiotic_data[1]
antibiotic_data[2]
antibiotic_data[2,]
antibiotic_data[,2]
antibiotic_data[,2:5]
antibiotic_data(trime_resis)
new<-antibiotic_data[,2:5]
View(new)
dim(antibiotic_data)
new_df<-antibiotic_data[,17:21]
View(new_df)
?cbind
new_df2<-antibiotic_data[,3]
View(new_df2)
df3<-cbind(new_df2, new_df)
View(df3)
df3<-antibiotic_data[,c(3,17,18,19,20,21)]
df3<-antibiotic_data[,c(3,17:21)]
library(reshape2) #install.packages("reshape2")
library(ggplot2)
str(df3)
df3$Pond_No<-as.factor(df3$Pond_No)
str(df3)
?melt
#reshape dataframe
df_m<-melt(df3)
View(df_m)
df_m$variable
unique(df_m$variable)
ggplot(df_m, aes(Pond_No,value, fill=variable))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond NUmber")+
theme_void()
#plot this bad boy
ggplot(df_m, aes(Pond_No,value, fill=variable))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond NUmber")+
theme_bw()
#plot this bad boy
ggplot(df_m, aes(Pond_No,value, fill=variable))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
facet_wrap(~Pond_No)
#plot this bad boy
ggplot(df_m, aes(Pond_No,value, fill=variable))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
facet_wrap(~Pond_No, scales = "free_x")
ggplot(df_m, aes(Pond_No,value, fill=variable))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
facet_wrap(~variable, scales = "free_x")
ggplot(df_m, aes(Pond_No,value, fill=Pond_No))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
facet_wrap(~variable, scales = "free_x")
ggplot(df_m, aes(Pond_No,value, fill=Pond_No))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
facet_wrap(~variable, scales = "free_y")
ggplot(df_m, aes(Pond_No,value, fill=Pond_No))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
geom_jitter())+
ggplot(df_m, aes(Pond_No,value, fill=Pond_No))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
geom_jitter()+
facet_wrap(~variable, scales = "free_y")
which(df_m$value >100)
ggplot(df_m[-which(df_m$value >100),], aes(Pond_No,value, fill=Pond_No))+
geom_boxplot()+
ylab("Percent resistant to AB")+
xlab("Pond Number")+
theme_bw()+
geom_jitter()+
facet_wrap(~variable, scales = "free_y")
PF_cali_ani_output <- read.delim("C:/Users/patty/Downloads/PF_cali_ani_output")
View(PF_cali_ani_output)
library(ggplot2)
ggplot(PF_cali_ani_output, aes(Sp1, Sp2, fill=ANI))+
geom_tile()
which(PF_cali_ani_output$Sp1 == '629A2A')
which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A')
ggplot(PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A'),], aes(Sp1, Sp2, fill=ANI))+
geom_tile()
ggplot(PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A') | | PF_cali_ani_output$Sp2 == '630A' | PF_cali_ani_output$Sp2 == '629A2A'),], aes(Sp1, Sp2, fill=ANI))+
ggplot(PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A') | PF_cali_ani_output$Sp2 == '630A' | PF_cali_ani_output$Sp2 == '629A2A'),], aes(Sp1, Sp2, fill=ANI))+
ggplot(PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A' | PF_cali_ani_output$Sp2 == '630A' | PF_cali_ani_output$Sp2 == '629A2A'),], aes(Sp1, Sp2, fill=ANI))+
geom_tile()
PF_cali_ani_output <- read.delim("C:/Users/patty/Downloads/PF_cali_ani_output")
ggplot(PF_cali_ani_output, aes(Comparison, ANI))+
geom_boxplot()
ggplot(PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A' | PF_cali_ani_output$Sp2 == '630A' | PF_cali_ani_output$Sp2 == '629A2A'),], aes(Comparison, ANI))+
geom_boxplot()
PF_cali_ani_output <-PF_cali_ani_output[-which(PF_cali_ani_output$Sp1 == '629A2A' | PF_cali_ani_output$Sp1 == '630A' | PF_cali_ani_output$Sp2 == '630A' | PF_cali_ani_output$Sp2 == '629A2A'),]
ggplot(PF_cali_ani_output, aes(Sp1, Sp2, fill=ANI))+
geom_tile()
ggplot(PF_cali_ani_output, aes(Comparison, ANI))+
geom_boxplot()
t.test(PF_cali_ani_output$ANI ~ PF_cali_ani_output$Comparison)
ggplot(PF_cali_ani_output, aes(Comparison, ANI))+
geom_boxplot()+
theme_bw()+
ylab("Average Nucleotide Identity")+
xlab("")
ggplot(PF_cali_ani_output, aes(Sp1, Sp2, fill=ANI))+
geom_tile()+
theme_bw()+
ylab("")+
xlab("")
ggplot(PF_cali_ani_output, aes(Comparison, ANI))+
geom_boxplot()+
theme_bw()+
ylab("Average Nucleotide Identity")+
xlab("")
ggplot(PF_cali_ani_output, aes(Sp1, Sp2, fill=ANI))+
geom_tile()+
theme_bw()+
ylab("")+
xlab("")
library(tidyverse)
library(micropan)
#load genome table
gnm.tbl <- read.delim("C:/Users/patty/Downloads/PFC_genome_table.txt")
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa/", pattern = "*.faa", full.names = T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T)
setwd("C:/Users/patty/Downloads/PFC_aggregated_prot/")
blastpAllAll(faa.files, out.folder = "blast", verbose=T)
?blastpAllAll
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa/test/", pattern = "*.faa", full.names = T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2)
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa/test/", pattern = "\\.faa$", full.names = T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2)
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa", pattern = "\\.faa$", full.names = T)
faa.files
?panPrep
library(tidyverse)
library(micropan)
gnm.tbl <- read.delim("C:/Users/patty/Downloads/PFC_genome_table.txt")
View(gnm.tbl)
#setwd
setwd("C:/Users/patty/Downloads/PFC_aggregated_prot/")
dir.create("blast")
dir.create('faa')
for(i in 1:nrow(gnm.tbl)){
panPrep(file.path("C:/Users/patty/Downloads/PFC_aggregated_prot/", str_c(gnm.tbl$File[i], ".faa")),
gnm.tbl$genome_id[i],
file.path("faa", str_c(gnm.tbl$genome_id[i], ".faa")))
}
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa", pattern = "\\.faa$", full.names = T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2, verbose=T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2)
gnm.tbl <- read.delim("C:/Users/patty/Downloads/PFC_genome_table.txt")
setwd("C:/Users/patty/Downloads/PFC_aggregated_prot/")
for(i in 1:nrow(gnm.tbl)){
panPrep(file.path("C:/Users/patty/Downloads/PFC_aggregated_prot/", str_c(gnm.tbl$File[i], ".faa")),
gnm.tbl$genome_id[i],
file.path("faa", str_c(gnm.tbl$genome_id[i], ".faa")))
}
faa.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/faa", pattern = "\\.faa$", full.names = T)
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2)
#get list of BLAST files
blast.files<-list.files("C:/Users/patty/Downloads/PFC_aggregated_prot/blast/", pattern = "txt$", full.names = T)
blast.files
dst.tbl <- bDist(blast.files = blast.files, e.value=0.05, verbose=T)
ggplot(dst.tbl) +
geom_histogram(aes(x = Distance), bins = 100)
clst.blast <- bClust(dst.tbl, linkage = "complete", threshold = 0.75)
panmat.blast <- panMatrix(clst.blast)
View(panmat.blast)
tibble(Clusters = as.integer(table(factor(colSums(panmat.blast > 0),
levels = 1:nrow(panmat.blast)))),
Genomes = 1:nrow(panmat.blast)) %>%
ggplot(aes(x = Genomes, y = Clusters)) +
geom_col() + labs(title = "Number of clusters found in 1, 2,...,all genomes")
heaps.est <- heaps(panmat.blast, n.perm = 500)
print(heaps.est)
print(chao(panmat.blast))
fitted <- binomixEstimate(panmat.blast, K.range = 3:8)
print(fitted$BIC.tbl)
ncomp <- 4
fitted$Mix.tbl %>%
filter(Components == ncomp) %>%
ggplot() +
geom_col(aes(x = "", y = Mixing.proportion, fill = Detection.prob)) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "Pan-genome gene family distribution",
fill = "Detection\nprobability") +
scale_fill_gradientn(colors = c("pink", "orange", "green", "cyan", "blue"))
library(ggdendro)
install.packages("ggdendro")
library(ggdendro)
d.man <- distManhattan(panmat.blast)
ggdendrogram(dendro_data(hclust(d.man, method = "average")),
rotate = TRUE, theme_dendro = FALSE) +
labs(x = "Genomes", y = "Manhattan distance", title = "Pan-genome dendrogram")
pm <- panmat.blast                                                   # make a copy
rownames(pm) <- gnm.tbl$Name[match(rownames(pm), gnm.tbl$genome_id)] # new rownames
weights <- geneWeights(pm, type = "shell")
distManhattan(pm, weights = weights) %>%
hclust(method = "average") %>%
dendro_data() %>%
ggdendrogram(rotate = TRUE, theme_dendro = FALSE) +
labs(x = "Genomes", y = "Weighted Manhattan distance", title = "Pan-genome dendrogram")
dim(panmat.blast)
pm <- panmat.blast                                                   # make a copy
rownames(pm) <- gnm.tbl$File[match(rownames(pm), gnm.tbl$genome_id)] # new rownames
weights <- geneWeights(pm, type = "shell")
distManhattan(pm, weights = weights) %>%
hclust(method = "average") %>%
dendro_data() %>%
ggdendrogram(rotate = TRUE, theme_dendro = FALSE) +
labs(x = "Genomes", y = "Weighted Manhattan distance", title = "Pan-genome dendrogram")
#extract pan genes
core.tbl <- extractPanGenes(clst.blast)
panPca(panmat.blast)
pfc.pca<-panPca(panmat.blast)
biplot(pfc.pca)
View(clst.blast)
str(dst.tbl)
# Intercept      alpha
#706.942519   0.430156
print(chao(panmat.blast))
print(heaps.est)
#setwd
setwd("C:/Users/patty/OneDrive/Documents/GitHub/Pseudo_fluor/")
#load genome table
gnm.tbl <- read.delim("PFC_genome_table.txt")
setwd("C:/Users/patty/OneDrive/Documents/GitHub/Pseudo_fluor/")
#load genome table
gnm.tbl <- read.delim("PFC_genome_table.txt")
#create new folder for BLAST results and faa files
dir.create("blast")
dir.create('faa')
for(i in 1:nrow(gnm.tbl)){
panPrep(file.path("C:/Users/patty/OneDrive/Documents/GitHub/Pseudo_fluor/PFC_aggregated_prot/", str_c(gnm.tbl$File[i], ".faa")),
gnm.tbl$genome_id[i],
file.path("faa", str_c(gnm.tbl$genome_id[i], ".faa")))
}
faa.files<-list.files("C:/Users/patty/OneDrive/Documents/GitHub/Pseudo_fluor/faa", pattern = "\\.faa$", full.names = T)
faa.files
blastpAllAll(faa.files, out.folder = "blast", verbose=T, threads=2)
#get list of BLAST files
blast.files<-list.files("C:/Users/patty/OneDrive/Documents/GitHub/Pseudo_fluor/blast/", pattern = "txt$", full.names = T)
#get distances
dst.tbl <- bDist(blast.files = blast.files, e.value=0.05, verbose=T)
#visualize distances (optional)
ggplot(dst.tbl) +
geom_histogram(aes(x = Distance), bins = 100)
#hierarchical cluster data
clst.blast <- bClust(dst.tbl, linkage = "complete", threshold = 0.75)
#construct pangenome matrix
panmat.blast <- panMatrix(clst.blast)
#visualize the number of clusters per genomes
tibble(Clusters = as.integer(table(factor(colSums(panmat.blast > 0),
levels = 1:nrow(panmat.blast)))),
Genomes = 1:nrow(panmat.blast)) %>%
ggplot(aes(x = Genomes, y = Clusters)) +
geom_col() + labs(title = "Number of clusters found in 1, 2,...,all genomes")
#calculate pangenome size
heaps.est <- heaps(panmat.blast, n.perm = 500)
print(heaps.est)
# Intercept      alpha
#706.942519   0.430156
print(chao(panmat.blast))
#153408
fitted <- binomixEstimate(panmat.blast, K.range = 3:8)
print(fitted$BIC.tbl)
ncomp <- 4
fitted$Mix.tbl %>%
filter(Components == ncomp) %>%
ggplot() +
geom_col(aes(x = "", y = Mixing.proportion, fill = Detection.prob)) +
coord_polar(theta = "y") +
labs(x = "", y = "", title = "Pan-genome gene family distribution",
fill = "Detection\nprobability") +
scale_fill_gradientn(colors = c("pink", "orange", "green", "cyan", "blue"))
#view clustered genomes (manhattan unweighted)
library(ggdendro)
d.man <- distManhattan(panmat.blast)
ggdendrogram(dendro_data(hclust(d.man, method = "average")),
rotate = TRUE, theme_dendro = FALSE) +
labs(x = "Genomes", y = "Manhattan distance", title = "Pan-genome dendrogram")
#view clustered genomes (manhattan weighted)
pm <- panmat.blast                                                   # make a copy
rownames(pm) <- gnm.tbl$File[match(rownames(pm), gnm.tbl$genome_id)] # new rownames
weights <- geneWeights(pm, type = "shell")
distManhattan(pm, weights = weights) %>%
hclust(method = "average") %>%
dendro_data() %>%
ggdendrogram(rotate = TRUE, theme_dendro = FALSE) +
labs(x = "Genomes", y = "Weighted Manhattan distance", title = "Pan-genome dendrogram")
pfc.pca<-panPca(panmat.blast)
#extract pan genes
##Look at ANI
PF_cali_ani_output <- read.delim("PFC_ANI.txt")
library(ggplot2)
#heatmap of ANI
ggplot(PF_cali_ani_output, aes(Sp1, Sp2, fill=ANI))+
geom_tile()+
theme_bw()+
ylab("")+
xlab("")
ggplot(dst.tbl) +
geom_histogram(aes(x = Distance), bins = 100)
print(heaps.est)
# Intercept      alpha
#811.142958   1.141321
print(chao(panmat.blast))
